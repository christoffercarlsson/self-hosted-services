services:
  bitwarden:
    image: vaultwarden/server:latest
    container_name: bitwarden
    restart: unless-stopped
    depends_on:
      - traefik
    volumes:
      - ${BITWARDEN_PATH}:/data
    environment:
      - SIGNUPS_ALLOWED=${BITWARDEN_SIGNUPS_ALLOWED}
      - INVITATIONS_ALLOWED=${BITWARDEN_INVITATIONS_ALLOWED}
    labels:
      - traefik.enable=true
      - traefik.http.routers.bitwarden.entrypoints=websecure
      - traefik.http.routers.bitwarden.rule=Host(`${BITWARDEN_SUBDOMAIN}.${ROOT_DOMAIN}`)
      - traefik.http.routers.bitwarden.tls.certresolver=selfhostedservices

  ddns-updater:
    image: qmcgaw/ddns-updater
    container_name: ddns-updater
    restart: unless-stopped
    volumes:
      - ${DDNS_UPDATER_PATH}:/updater/data
    network_mode: bridge
    environment:
      CONFIG: >-
        {
          "settings": [
            {
              "provider": "njalla",
              "domain": "${ROOT_DOMAIN}",
              "host": "${BITWARDEN_SUBDOMAIN}",
              "key": "${BITWARDEN_DOMAIN_KEY}",
              "ip_version": "ipv4",
              "provider_ip": true
            },
            {
              "provider": "njalla",
              "domain": "${ROOT_DOMAIN}",
              "host": "${EXCALIDRAW_SUBDOMAIN}",
              "key": "${EXCALIDRAW_DOMAIN_KEY}",
              "ip_version": "ipv4",
              "provider_ip": true
            },
            {
              "provider": "njalla",
              "domain": "${ROOT_DOMAIN}",
              "host": "${JELLYFIN_SUBDOMAIN}",
              "key": "${JELLYFIN_DOMAIN_KEY}",
              "ip_version": "ipv4",
              "provider_ip": true
            },
            {
              "provider": "njalla",
              "domain": "${ROOT_DOMAIN}",
              "host": "${NEXTCLOUD_SUBDOMAIN}",
              "key": "${NEXTCLOUD_DOMAIN_KEY}",
              "ip_version": "ipv4",
              "provider_ip": true
            },
            {
              "provider": "njalla",
              "domain": "${ROOT_DOMAIN}",
              "host": "${UPTIME_KUMA_SUBDOMAIN}",
              "key": "${UPTIME_KUMA_DOMAIN_KEY}",
              "ip_version": "ipv4",
              "provider_ip": true
            },
            {
              "provider": "njalla",
              "domain": "${ROOT_DOMAIN}",
              "host": "${LIBRETRANSLATE_SUBDOMAIN}",
              "key": "${LIBRETRANSLATE_DOMAIN_KEY}",
              "ip_version": "ipv4",
              "provider_ip": true
            }
          ]
        }

  excalidraw:
    image: excalidraw/excalidraw:latest
    container_name: excalidraw
    restart: unless-stopped
    depends_on:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.excalidraw.entrypoints=websecure
      - traefik.http.routers.excalidraw.rule=Host(`${EXCALIDRAW_SUBDOMAIN}.${ROOT_DOMAIN}`)
      - traefik.http.routers.excalidraw.tls.certresolver=selfhostedservices

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    depends_on:
      - traefik
    volumes:
      - ${JELLYFIN_CACHE_PATH}:/cache
      - ${JELLYFIN_CONFIG_PATH}:/config
      - ${JELLYFIN_MEDIA_PATH}:/media:ro
    environment:
      - JELLYFIN_PublishedServerUrl=https://${JELLYFIN_SUBDOMAIN}.${ROOT_DOMAIN}
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.rule=Host(`${JELLYFIN_SUBDOMAIN}.${ROOT_DOMAIN}`)
      - traefik.http.routers.jellyfin.tls.certresolver=selfhostedservices
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096

  libretranslate:
    image: libretranslate/libretranslate:latest
    container_name: libretranslate
    restart: unless-stopped
    depends_on:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.libretranslate.entrypoints=websecure
      - traefik.http.routers.libretranslate.rule=Host(`${LIBRETRANSLATE_SUBDOMAIN}.${ROOT_DOMAIN}`)
      - traefik.http.routers.libretranslate.tls.certresolver=selfhostedservices
      - traefik.http.services.libretranslate.loadbalancer.server.port=5000

  nextcloud:
    image: lscr.io/linuxserver/nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    depends_on:
      - nextcloud-db
      - redis
      - traefik
    volumes:
      - ${NEXTCLOUD_CONFIG_PATH}:/config
      - ${NEXTCLOUD_APP_PATH}:/data
    environment:
      - PUID=${NEXTCLOUD_PUID}
      - PGID=${NEXTCLOUD_PGID}
      - TZ=${NEXTCLOUD_TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.nextcloud.headers.browserXSSFilter=true
      - traefik.http.middlewares.nextcloud.headers.contentTypeNosniff=true
      - traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.nextcloud.headers.stsPreload=true
      - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011
      - traefik.http.middlewares.nextcloud-redirect.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud-redirect.redirectregex.regex=https://(.*)/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud-redirect.redirectregex.replacement=https://$${1}/remote.php/dav/
      - traefik.http.routers.nextcloud.entrypoints=websecure
      - traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud-redirect
      - traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_SUBDOMAIN}.${ROOT_DOMAIN}`)
      - traefik.http.routers.nextcloud.tls.certresolver=selfhostedservices

  nextcloud-db:
    image: postgres:alpine
    container_name: nextcloud-db
    restart: unless-stopped
    volumes:
      - ${NEXTCLOUD_DB_PATH}:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - POSTGRES_DB=${NEXTCLOUD_DB_NAME}
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
    healthcheck:
      test: [CMD-SHELL, 'pg_isready -U ${NEXTCLOUD_DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - ${REDIS_PATH}:/var/lib/redis
    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 1s
      timeout: 3s
      retries: 30

  traefik:
    image: traefik:v2.8
    container_name: traefik
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.selfhostedservices.acme.tlschallenge=true
      - --certificatesresolvers.selfhostedservices.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.selfhostedservices.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
    volumes:
      - ${LETSENCRYPT_PATH}:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    depends_on:
      - traefik
    volumes:
      - ${UPTIME_KUMA_PATH}:/app/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime-kuma.entrypoints=websecure
      - traefik.http.routers.uptime-kuma.rule=Host(`${UPTIME_KUMA_SUBDOMAIN}.${ROOT_DOMAIN}`)
      - traefik.http.routers.uptime-kuma.tls.certresolver=selfhostedservices

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
