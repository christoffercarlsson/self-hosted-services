version: '3.8'
services:
  bitwarden:
    image: vaultwarden/server:latest
    networks:
      - self-hosted-services
    volumes:
      - bitwarden:/data
    environment:
      - SIGNUPS_ALLOWED=${BITWARDEN_SIGNUPS_ALLOWED}
      - INVITATIONS_ALLOWED=${BITWARDEN_INVITATIONS_ALLOWED}
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.bitwarden.entrypoints=web-secure
        - traefik.http.routers.bitwarden.rule=Host(`${BITWARDEN_HOSTNAME}`)
        - traefik.http.routers.bitwarden.tls.certresolver=self-hosted-services
        - traefik.http.services.bitwarden.loadbalancer.server.port=80

  conduit:
    image: matrixconduit/matrix-conduit:latest
    networks:
      - self-hosted-services
    user: root
    volumes:
      - conduit:/var/lib/matrix-conduit
    environment:
      - CONDUIT_ADDRESS=0.0.0.0
      - CONDUIT_ALLOW_ENCRYPTION=${CONDUIT_ALLOW_ENCRYPTION}
      - CONDUIT_ALLOW_FEDERATION=${CONDUIT_ALLOW_FEDERATION}
      - CONDUIT_ALLOW_REGISTRATION=${CONDUIT_ALLOW_REGISTRATION}
      - CONDUIT_CONFIG=''
      - CONDUIT_DATABASE_BACKEND=rocksdb
      - CONDUIT_DATABASE_PATH=/var/lib/matrix-conduit
      - CONDUIT_MAX_REQUEST_SIZE=${CONDUIT_MAX_REQUEST_SIZE}
      - CONDUIT_PORT=6167
      - CONDUIT_SERVER_NAME=${CONDUIT_SERVER_NAME}
      - CONDUIT_TRUSTED_SERVERS=${CONDUIT_TRUSTED_SERVERS}
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowOriginList=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowHeaders=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowMethods=*
        - traefik.http.routers.conduit.entrypoints=web-secure
        - traefik.http.routers.conduit.rule=Host(`${CONDUIT_HOSTNAME}`)
        - traefik.http.routers.conduit.tls.certresolver=self-hosted-services
        - traefik.http.routers.conduit.middlewares=cors-headers
        - traefik.http.services.conduit.loadbalancer.server.port=6167

  conduit-well-known:
    image: nginx:latest
    networks:
      - self-hosted-services
    volumes:
      - ./conduit/well-known.template:/etc/nginx/conf.d/conduit-well-known.template
    environment:
      - CONDUIT_HOSTNAME=${CONDUIT_HOSTNAME}
    command:
      /bin/bash -c "envsubst < /etc/nginx/conf.d/conduit-well-known.template >
      /etc/nginx/conf.d/conduit-well-known.conf && nginx -g 'daemon off;'"
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowOriginList=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowHeaders=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowMethods=*
        - traefik.http.routers.conduit-well-known.entrypoints=web-secure
        - 'traefik.http.routers.conduit-well-known.rule=Host(`${CONDUIT_SERVER_NAME}`)
          && PathPrefix(`/.well-known/matrix`)'
        - traefik.http.routers.conduit-well-known.tls.certresolver=self-hosted-services
        - traefik.http.routers.conduit-well-known.middlewares=cors-headers
        - traefik.http.services.conduit-well-known.loadbalancer.server.port=80

  ddns-updater:
    image: qmcgaw/ddns-updater
    networks:
      - self-hosted-services
    volumes:
      - ./ddns-updater:/updater/data
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  excalidraw:
    image: excalidraw/excalidraw:latest
    networks:
      - self-hosted-services
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.excalidraw.entrypoints=web-secure
        - traefik.http.routers.excalidraw.rule=Host(`${EXCALIDRAW_HOSTNAME}`)
        - traefik.http.routers.excalidraw.tls.certresolver=self-hosted-services
        - traefik.http.services.excalidraw.loadbalancer.server.port=80

  ghost:
    image: ghost:alpine
    networks:
      - self-hosted-services
    volumes:
      - ghost:/var/lib/ghost/content
    environment:
      - database__client=mysql
      - database__connection__host=ghost-db
      - database__connection__user=ghost
      - database__connection__password=${GHOST_DB_PASSWORD}
      - database__connection__database=ghost
      - url=https://${GHOST_HOSTNAME}
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.ghost.entrypoints=web-secure
        - traefik.http.routers.ghost.rule=Host(`${GHOST_HOSTNAME}`)
        - traefik.http.routers.ghost.tls.certresolver=self-hosted-services
        - traefik.http.services.ghost.loadbalancer.server.port=2368

  ghost-db:
    image: mysql:8.0
    networks:
      - self-hosted-services
    volumes:
      - ghost-db:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=ghost
      - MYSQL_PASSWORD=${GHOST_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${GHOST_DB_PASSWORD}
      - MYSQL_USER=ghost
    deploy:
      restart_policy:
        condition: on-failure

  jellyfin:
    image: jellyfin/jellyfin:latest
    networks:
      - self-hosted-services
    volumes:
      - jellyfin:/cache
      - jellyfin:/config
      - jellyfin-media:/media:ro
    environment:
      - JELLYFIN_PublishedServerUrl=https://${JELLYFIN_HOSTNAME}
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.jellyfin.entrypoints=web-secure
        - traefik.http.routers.jellyfin.rule=Host(`${JELLYFIN_HOSTNAME}`)
        - traefik.http.routers.jellyfin.tls.certresolver=self-hosted-services
        - traefik.http.services.jellyfin.loadbalancer.server.port=8096

  libretranslate:
    image: libretranslate/libretranslate:latest
    networks:
      - self-hosted-services
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.libretranslate.entrypoints=web-secure
        - traefik.http.routers.libretranslate.rule=Host(`${LIBRETRANSLATE_HOSTNAME}`)
        - traefik.http.routers.libretranslate.tls.certresolver=self-hosted-services
        - traefik.http.services.libretranslate.loadbalancer.server.port=5000

  nextcloud:
    image: lscr.io/linuxserver/nextcloud:latest
    networks:
      - self-hosted-services
    volumes:
      - nextcloud:/config
      - nextcloud:/data
    environment:
      - PUID=${NEXTCLOUD_PUID}
      - PGID=${NEXTCLOUD_PGID}
      - TZ=${NEXTCLOUD_TIMEZONE}
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.nextcloud.headers.browserXSSFilter=true
        - traefik.http.middlewares.nextcloud.headers.contentTypeNosniff=true
        - traefik.http.middlewares.nextcloud.headers.customRequestHeaders.X-Forwarded-Proto=https
        - traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true
        - traefik.http.middlewares.nextcloud.headers.stsPreload=true
        - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011
        - traefik.http.middlewares.nextcloud-redirect.redirectregex.permanent=true
        - traefik.http.middlewares.nextcloud-redirect.redirectregex.regex=https://(.*)/.well-known/(card|cal)dav
        - traefik.http.middlewares.nextcloud-redirect.redirectregex.replacement=https://$${1}/remote.php/dav/
        - traefik.http.routers.nextcloud.entrypoints=web-secure
        - traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud-redirect
        - traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_HOSTNAME}`)
        - traefik.http.routers.nextcloud.tls.certresolver=self-hosted-services
        - traefik.http.services.nextcloud.loadbalancer.server.port=443
        - traefik.http.services.nextcloud.loadbalancer.server.scheme=https

  nextcloud-db:
    image: postgres:alpine
    networks:
      - self-hosted-services
    volumes:
      - nextcloud-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - POSTGRES_USER=nextcloud
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: [CMD-SHELL, 'pg_isready -U ${NEXTCLOUD_DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

  notes:
    image: standardnotes/web:stable
    networks:
      - self-hosted-services
    environment:
      - DASHBOARD_URL=http://standardnotes.com/dashboard
      - DEFAULT_SYNC_SERVER=https://${NOTES_SYNC_HOSTNAME}
      - PLANS_URL=https://standardnotes.com/plans
      - PURCHASE_URL=https://standardnotes.com/purchase
      - SECRET_KEY_BASE=${NOTES_SECRET_KEY_BASE}
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.notes.entrypoints=web-secure
        - traefik.http.routers.notes.rule=Host(`${NOTES_HOSTNAME}`)
        - traefik.http.routers.notes.tls.certresolver=self-hosted-services
        - traefik.http.services.notes.loadbalancer.server.port=3000

  notes-auth:
    image: standardnotes/auth:latest
    networks:
      - self-hosted-services
    entrypoint: [./packages/auth/docker/entrypoint.sh, start-web]
    environment:
      - ACCESS_TOKEN_AGE=${NOTES_ACCESS_TOKEN_AGE}
      - AUTH_JWT_TTL=${NOTES_AUTH_JWT_TTL}
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - DB_DATABASE=notes
      - DB_DEBUG_LEVEL=${NOTES_DB_DEBUG_LEVEL}
      - DB_HOST=notes-db
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DB_PORT=3306
      - DB_REPLICA_HOST=notes-db
      - DB_USERNAME=notes
      - DISABLE_USER_REGISTRATION=${NOTES_DISABLE_USER_REGISTRATION}
      - ENCRYPTION_SERVER_KEY=${NOTES_ENCRYPTION_SERVER_KEY}
      - EPHEMERAL_SESSION_AGE=${NOTES_EPHEMERAL_SESSION_AGE}
      - FAILED_LOGIN_LOCKOUT=${NOTES_FAILED_LOGIN_LOCKOUT}
      - JWT_SECRET=${NOTES_JWT_SECRET}
      - LEGACY_JWT_SECRET=${NOTES_LEGACY_JWT_SECRET}
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - MAX_LOGIN_ATTEMPTS=${NOTES_MAX_LOGIN_ATTEMPTS}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_EVENTS_CHANNEL=notes-auth-events
      - REDIS_URL=redis://redis
      - REFRESH_TOKEN_AGE=${NOTES_REFRESH_TOKEN_AGE}
      - SYNCING_SERVER_URL=http://notes-sync:3000
      - PSEUDO_KEY_PARAMS_KEY=${NOTES_PSEUDO_KEY_PARAMS_KEY}
      - VALET_TOKEN_TTL=${NOTES_VALET_TOKEN_TTL}
      - VALET_TOKEN_SECRET=${NOTES_VALET_TOKEN_SECRET}
      - VERSION=local
    deploy:
      restart_policy:
        condition: on-failure

  notes-auth-worker:
    image: standardnotes/auth:latest
    networks:
      - self-hosted-services
    entrypoint: [./packages/auth/docker/entrypoint.sh, start-worker]
    environment:
      - ACCESS_TOKEN_AGE=${NOTES_ACCESS_TOKEN_AGE}
      - AUTH_JWT_TTL=${NOTES_AUTH_JWT_TTL}
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - DB_DATABASE=notes
      - DB_DEBUG_LEVEL=${NOTES_DB_DEBUG_LEVEL}
      - DB_HOST=notes-db
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DB_PORT=3306
      - DB_REPLICA_HOST=notes-db
      - DB_USERNAME=notes
      - DISABLE_USER_REGISTRATION=${NOTES_DISABLE_USER_REGISTRATION}
      - ENCRYPTION_SERVER_KEY=${NOTES_ENCRYPTION_SERVER_KEY}
      - EPHEMERAL_SESSION_AGE=${NOTES_EPHEMERAL_SESSION_AGE}
      - FAILED_LOGIN_LOCKOUT=${NOTES_FAILED_LOGIN_LOCKOUT}
      - JWT_SECRET=${NOTES_JWT_SECRET}
      - LEGACY_JWT_SECRET=${NOTES_LEGACY_JWT_SECRET}
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - MAX_LOGIN_ATTEMPTS=${NOTES_MAX_LOGIN_ATTEMPTS}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_EVENTS_CHANNEL=notes-auth-events
      - REDIS_URL=redis://redis
      - REFRESH_TOKEN_AGE=${NOTES_REFRESH_TOKEN_AGE}
      - SYNCING_SERVER_URL=http://notes-sync:3000
      - PSEUDO_KEY_PARAMS_KEY=${NOTES_PSEUDO_KEY_PARAMS_KEY}
      - VALET_TOKEN_TTL=${NOTES_VALET_TOKEN_TTL}
      - VALET_TOKEN_SECRET=${NOTES_VALET_TOKEN_SECRET}
      - VERSION=local
    deploy:
      restart_policy:
        condition: on-failure

  notes-db:
    image: mysql:5.6
    networks:
      - self-hosted-services
    volumes:
      - notes-db:/var/lib/mysql
      - notes-db:/docker-entrypoint-initdb.d
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8
      - --collation-server=utf8_general_ci
    environment:
      - MYSQL_DATABASE=notes
      - MYSQL_PASSWORD=${NOTES_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${NOTES_DB_PASSWORD}
      - MYSQL_USER=notes
    deploy:
      restart_policy:
        condition: on-failure

  notes-files:
    image: standardnotes/files:latest
    networks:
      - self-hosted-services
    volumes:
      - notes-files:/var/www/data/uploads
    entrypoint: [./packages/files/docker/entrypoint.sh, start-web]
    environment:
      - FILE_UPLOAD_PATH=data/uploads
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - MAX_CHUNK_BYTES={NOTES_FILE_MAX_UPLOAD_BYTES}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis
      - REDIS_EVENTS_CHANNEL=notes-files-events
      - VALET_TOKEN_SECRET=${NOTES_VALET_TOKEN_SECRET}
      - VERSION=local
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowOriginList=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowHeaders=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowMethods=*
        - traefik.http.routers.notes-files.entrypoints=web-secure
        - traefik.http.routers.notes-files.rule=Host(`${NOTES_FILES_HOSTNAME}`)
        - traefik.http.routers.notes-files.tls.certresolver=self-hosted-services
        - traefik.http.routers.notes-files.middlewares=cors-headers
        - traefik.http.services.notes-files.loadbalancer.server.port=3000

  notes-gateway:
    image: standardnotes/api-gateway:latest
    networks:
      - self-hosted-services
    entrypoint: [./packages/api-gateway/docker/entrypoint.sh, start-web]
    environment:
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - AUTH_SERVER_URL=http://notes-auth:3000
      - FILES_SERVER_URL=https://${NOTES_FILES_HOSTNAME}
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis
      - REDIS_EVENTS_CHANNEL=notes-api-events
      - SYNCING_SERVER_JS_URL=http://notes-sync:3000
      - VERSION=local
      - WORKSPACE_SERVER_URL=http://notes-workspace:3000
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowOriginList=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowHeaders=*
        - traefik.http.middlewares.cors-headers.headers.accessControlAllowMethods=*
        - traefik.http.routers.notes-gateway.entrypoints=web-secure
        - traefik.http.routers.notes-gateway.rule=Host(`${NOTES_SYNC_HOSTNAME}`)
        - traefik.http.routers.notes-gateway.tls.certresolver=self-hosted-services
        - traefik.http.routers.notes-gateway.middlewares=cors-headers
        - traefik.http.services.notes-gateway.loadbalancer.server.port=3000

  notes-sync:
    image: standardnotes/syncing-server-js:latest
    networks:
      - self-hosted-services
    entrypoint: [./packages/syncing-server/docker/entrypoint.sh, start-web]
    environment:
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - AUTH_SERVER_URL=http://notes-auth:3000
      - DB_DATABASE=notes
      - DB_DEBUG_LEVEL=${NOTES_DB_DEBUG_LEVEL}
      - DB_HOST=notes-db
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DB_PORT=3306
      - DB_REPLICA_HOST=notes-db
      - DB_USERNAME=notes
      - EMAIL_ATTACHMENT_MAX_BYTE_SIZE=${NOTES_EMAIL_ATTACHMENT_MAX_BYTE_SIZE}
      - FILES_SERVER_URL=https://${NOTES_FILES_HOSTNAME}
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_EVENTS_CHANNEL=notes-sync-events
      - REDIS_URL=redis://redis
      - REVISIONS_FREQUENCY=${NOTES_REVISIONS_FREQUENCY}
      - VERSION=local
    deploy:
      restart_policy:
        condition: on-failure

  notes-sync-worker:
    image: standardnotes/syncing-server-js:latest
    networks:
      - self-hosted-services
    entrypoint: [./packages/syncing-server/docker/entrypoint.sh, start-worker]
    environment:
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - AUTH_SERVER_URL=http://notes-auth:3000
      - DB_DATABASE=notes
      - DB_DEBUG_LEVEL=${NOTES_DB_DEBUG_LEVEL}
      - DB_HOST=notes-db
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DB_PORT=3306
      - DB_REPLICA_HOST=notes-db
      - DB_USERNAME=notes
      - EMAIL_ATTACHMENT_MAX_BYTE_SIZE=${NOTES_EMAIL_ATTACHMENT_MAX_BYTE_SIZE}
      - FILES_SERVER_URL=https://${NOTES_FILES_HOSTNAME}
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_EVENTS_CHANNEL=notes-sync-events
      - REDIS_URL=redis://redis
      - REVISIONS_FREQUENCY=${NOTES_REVISIONS_FREQUENCY}
      - VERSION=local
    deploy:
      restart_policy:
        condition: on-failure

  notes-workspace:
    image: standardnotes/workspace:latest
    networks:
      - self-hosted-services
    entrypoint: [./packages/workspace/docker/entrypoint.sh, start-web]
    environment:
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - DB_DATABASE=notes
      - DB_DEBUG_LEVEL=${NOTES_DB_DEBUG_LEVEL}
      - DB_HOST=notes-db
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DB_PORT=3306
      - DB_REPLICA_HOST=notes-db
      - DB_USERNAME=notes
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis
      - REDIS_EVENTS_CHANNEL=notes-workspace-events
      - VERSION=local
    deploy:
      restart_policy:
        condition: on-failure

  notes-workspace-worker:
    image: standardnotes/workspace:latest
    networks:
      - self-hosted-services
    entrypoint: [./packages/workspace/docker/entrypoint.sh, start-worker]
    environment:
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - DB_DATABASE=notes
      - DB_DEBUG_LEVEL=${NOTES_DB_DEBUG_LEVEL}
      - DB_HOST=notes-db
      - DB_MIGRATIONS_PATH=dist/migrations/*.js
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DB_PORT=3306
      - DB_REPLICA_HOST=notes-db
      - DB_USERNAME=notes
      - LOG_LEVEL=${NOTES_LOG_LEVEL}
      - NEW_RELIC_ENABLED=false
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis
      - REDIS_EVENTS_CHANNEL=notes-workspace-events
      - VERSION=local
    deploy:
      restart_policy:
        condition: on-failure

  protonmail:
    image: ghcr.io/christoffercarlsson/protonmail-bridge:2.3.0
    networks:
      - self-hosted-services
    volumes:
      - protonmail:/root
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    image: redis:alpine
    networks:
      - self-hosted-services
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: [CMD, redis-cli, ping]
      interval: 1s
      timeout: 3s
      retries: 30

  traefik:
    image: traefik:v2.8
    networks:
      - self-hosted-services
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=self-hosted-services
      - --providers.docker.swarmMode=true
      - --serverstransport.insecureskipverify=true
      - --entrypoints.web-secure.address=:443
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=web-secure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.self-hosted-services.acme.tlschallenge=true
      - --certificatesresolvers.self-hosted-services.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.self-hosted-services.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    networks:
      - self-hosted-services
    volumes:
      - uptime-kuma:/app/data
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.routers.uptime-kuma.entrypoints=web-secure
        - traefik.http.routers.uptime-kuma.rule=Host(`${UPTIME_KUMA_HOSTNAME}`)
        - traefik.http.routers.uptime-kuma.tls.certresolver=self-hosted-services
        - traefik.http.services.uptime-kuma.loadbalancer.server.port=3001

networks:
  self-hosted-services:
    external: true
    name: self-hosted-services

volumes:
  bitwarden:
  conduit:
  ghost:
  ghost-db:
  jellyfin:
  jellyfin-media:
    external: true
    name: jellyfin-media
  letsencrypt:
  nextcloud:
  nextcloud-db:
  notes-db:
  notes-files:
  protonmail:
  uptime-kuma:
